#Expt 1 signal to interference ratio for average and worst case
clc;
clear all; 
close all; 
#calculation of N and Q 
i = [1 , 1, 2, 1]; 
j = [1, 2, 2, 3]; 
N = (i.^2) + (i.*j) + (j.^2); 
Q = sqrt(3.*N); 
disp(Q); 
for n=2:1:4 
#for average case
avgSIdB = 10.*(log10(1./(6.*(Q.^(-n))))); 
#worstcase 
SbyIdB = 10.*(log10(0.5./((Q.^(-n)).+((Q-1).^(-n)).+((Q+1).^(-n))))); 
disp(avgSIdB); 
disp(SbyIdB); 
plot(N, avgSIdB, N, SbyIdB); 
xlabel("clustersize"); 
ylabel("S/I ratio");
hold on; 
grid on;
endfor
text(8.2, 7, "n=2"); 
text(8.2, 14, "n=3"); 
text(8.2, 21, "n=4");
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~
#Expt 2a erlang b and c system
#Blocking Probability clc;
clear all; close all;A = 0.1 : 0.1 : 100;
B = 0;
for c = [1,2,5,10,50,100]
a = (A.^c)/(factorial(c));
for k = 0 : 1: c;
B = B + ((A.^k)/factorial(k));
endfor
Pr = a./B;
loglog(A, Pr);
hold on;
grid on;
axis ([0.1 100 0.001 0.1])
endfor;
xlabel("Traffic Intensity");
ylabel("Probability of call blocking");
#Expt 2b
#Probability of delay
clc;
clear all;
close all;
A=0.1:0.1:100;
D=0;
for c=[1,2,5,10,50,100]
a=(A.^c);
for k=0:1:c-1
D=D+[(A.^k)/factorial(k)];
endfor
B=(A.^c)+((factorial(c)).*(1-(A/c)).*D);
Pr=a./B;
loglog(A,Pr);
hold on;
grid on;
axis([0.1 100 0.001 0.1])
endfor
xlabel('Traffic intensity'),ylabel('Probability of call delay'),
title('Experiment 2b')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~
#Expt 3 Rayleigh and ricean distribution 
clc;
clear all;
close all;
% To Plot Rayleigh - Ricean PDF
r = 0:0.001:10;
A = 10;
P = 0.2; %Sigma
Pe = (r/P^2).*(exp(-r.^2/2.*(P.^2)));
Pd = (r/P^2).*(exp(-((r.^2.+A.^2)/2.*P.^2)));
subplot(1,2,1)
plot(r,Pe);
xlabel("Received Signal Voltage level");
ylabel("Probability Density Function");
title("Rayleigh PDF");
subplot(1,2,2)
plot(r,Pd);
xlabel("Received Signal Voltage level");
ylabel("Probability Density Function");
title("Ricean PDF");
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~
#Expt 4 Gsm data interleaving 
clc;
clear all;
close all;
a=[1,1,1,1;2,2,2,2;3,3,3,3;4,4,4,4;5,5,5,5;6,6,6,6];
b=[10,10,10,10;11,11,11,11;,12,12,12,12;13,13,13,13;14,14,14,14;15,15,15,15];[p,q]=size(a)
disp("the first data");
disp(a);
disp("the second data");
disp(b);
for i=1:p
if(i<4)
c=[a(i,1:q) b((i+(p/2)),1:q)];
else
c=[a(i,1:q) b((i-(p/2)),1:q)];
endif
disp(c)
endfor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~
#Expt 6 free space propagation 
clc;
clear all;
close all;
gt=1;
gr=1;
pt=500;
l=10;
d=10;
pi=3.14;
c=3*10^8;
f=900;
lambda=c/f;
%case1
pt1=1:1:500;
pr=(pt1.*gt*gr*lambda^2)./(((4*pi)^2)*d^2.*l)
subplot(2,2,1)
hold on;
grid on;plot(pt1,pr);
title('varying transmitted power')
%case2
d1=1:0.01:10;
pr=(pt*gt*gr*lambda^2)./(((4*pi)^2).*d1.^2*l)
subplot(2,2,2)
hold on;
grid on;
plot(d1,pr);
title('varying distance')
%case3
lambda1=1:0.001:10;
pr=(pt*gt*gr.*lambda1.^2)./(((4*pi)^2)*d^2*l)
subplot(2,2,3)
hold on;
grid on;
plot(lambda1,pr);
title('varying wavelength')
%case4
l1=1:0.001:10;
pr=(pt*gt*gr.*lambda^2)./(((4*pi)^2)*d^2.*l1)
subplot(2,2,4)
hold on;
grid on;
plot(l1,pr);
title('varying loss')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~
#Expt 7 study and implement Walsh code hadaward matrix 
clc;
clear all;
close all;n=input('enter the number');
Hn=1;
for i=0:2:n
H2n=[Hn Hn ; Hn -Hn];
Hn=H2n;
endfor
disp(H2n);
[p,q]=size(H2n);
x=input('Enter 1st walsh code number:');
y=input('Enter 2nd walsh code number:');
H = H2n(x,1:q).*H2n(y,1:q);
disp(H);
L=0;
for k=1
for l=1:q
L=L+H(k,l);
l+1;
endfor
endfor
disp('the addition is:');
disp(L);
if L==0
disp('It is orthogonal');
else
disp('It is not orthogonal');
endif
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~
#Expt 8 study Dsss multiple access by multi of message signal with Pn seq
clc;
clear all;
close all;
m = [ 1 0 1 1];
n = [ 1 0 1];
m1 = length(n)L = (2^m1)-1; n
for i = 1:1:L n(4) = xor(n(1), n(3)); p(1, i) = n(1); n(1) = n(2); n(2) = n(3); n(3) = n(4); n
endfor
disp("The PN Sequence is "); disp(p);
l = length(m); for i = 1 : 1 : l for j = 1 : 1 : l d(i, j) = xor(m(1, i), p(1,j)); endfor endfor
disp("The DSS Sequence is "); disp(d);
